@extends('layouts.app')

@section('content')
<script>
    const isAdmin = @json(auth()->user() && auth()->user()->isAdmin());
</script>
<div class="container-fluid py-4">
    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h3 class="mb-0">Calendar</h3>
            @if(auth()->user() && auth()->user()->isAdmin())
            <button class="btn btn-light btn-sm" data-bs-toggle="modal" data-bs-target="#addEventModal">Add Event</button>
            @endif
        </div>
        <div class="card-body">
            <div class="calendar-container">
                <div class="calendar-header d-flex justify-content-between align-items-center mb-3">
                    <button class="btn btn-outline-primary btn-sm" id="prevMonth"><</button>
                    <h4 id="monthYear" class="mb-0"></h4>
                    <button class="btn btn-outline-primary btn-sm" id="nextMonth">></button>
                </div>
                <div class="calendar-grid">
                    <div class="calendar-day calendar-day-header">Sun</div>
                    <div class="calendar-day calendar-day-header">Mon</div>
                    <div class="calendar-day calendar-day-header">Tue</div>
                    <div class="calendar-day calendar-day-header">Wed</div>
                    <div class="calendar-day calendar-day-header">Thu</div>
                    <div class="calendar-day calendar-day-header">Fri</div>
                    <div class="calendar-day calendar-day-header">Sat</div>
                    <!-- Days will be generated by JS -->
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Event Modal -->
<div class="modal fade" id="addEventModal" tabindex="-1" aria-labelledby="addEventModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <form id="eventForm" class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addEventModalLabel">Add/Edit Event</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
          <input type="hidden" id="eventId" name="eventId" value="">
          <div class="mb-3">
              <label for="title" class="form-label">Title</label>
              <input type="text" class="form-control" id="title" name="title" required>
          </div>
          <div class="mb-3">
              <label for="description" class="form-label">Description</label>
              <textarea class="form-control" id="description" name="description"></textarea>
          </div>
          <div class="mb-3">
              <label for="start_time" class="form-label">Start Time</label>
              <input type="datetime-local" class="form-control" id="start_time" name="start_time" required>
          </div>
          <div class="mb-3">
              <label for="end_time" class="form-label">End Time</label>
              <input type="datetime-local" class="form-control" id="end_time" name="end_time">
          </div>
      </div>
      <div class="modal-footer">
        <button type="button" id="deleteEventBtn" class="btn btn-danger me-auto d-none">Delete</button>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="submit" class="btn btn-primary">Save Event</button>
      </div>
    </form>
  </div>
</div>
@endsection

@push('styles')
<style>
    .calendar-container {
        max-width: 700px;
        margin: 0 auto;
    }
    .calendar-grid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 5px;
    }
    .calendar-day {
        border: 1px solid #dee2e6;
        padding: 10px;
        min-height: 80px;
        display: flex;
        flex-direction: column;
        cursor: pointer;
        position: relative;
    }
    .calendar-day-header {
        background-color: #f8f9fa;
        font-weight: 600;
        text-align: center;
    }
    .calendar-day-number {
        font-weight: 700;
        margin-bottom: 5px;
    }
    .calendar-event {
        background-color: #4f46e5;
        color: white;
        padding: 2px 5px;
        border-radius: 4px;
        font-size: 0.8rem;
        margin-top: auto;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
    @media (max-width: 576px) {
        .calendar-day {
            min-height: 60px;
            padding: 5px;
            font-size: 0.8rem;
        }
    }
</style>
@endpush

@push('scripts')
<script>
document.addEventListener('DOMContentLoaded', function() {
    const calendarGrid = document.querySelector('.calendar-grid');
    const monthYearLabel = document.getElementById('monthYear');
    const prevMonthBtn = document.getElementById('prevMonth');
    const nextMonthBtn = document.getElementById('nextMonth');
    const eventForm = document.getElementById('eventForm');
    const addEventModal = new bootstrap.Modal(document.getElementById('addEventModal'));
    const deleteEventBtn = document.getElementById('deleteEventBtn');

    let currentDate = new Date();
    let events = [];
    let editingEventId = null;

    function fetchEvents() {
        fetch('{{ route("calendar.events") }}')
            .then(res => res.json())
            .then(data => {
                events = data;
                renderCalendar(currentDate);
            });
    }

    function renderCalendar(date) {
        calendarGrid.querySelectorAll('.calendar-day:not(.calendar-day-header)').forEach(el => el.remove());

        const year = date.getFullYear();
        const month = date.getMonth();

        const options = { year: 'numeric', month: 'long' };
        monthYearLabel.textContent = date.toLocaleDateString(undefined, options);

        const firstDay = new Date(year, month, 1);
        const startingDay = firstDay.getDay();

        const daysInMonth = new Date(year, month + 1, 0).getDate();

        for (let i = 0; i < startingDay; i++) {
            const emptyCell = document.createElement('div');
            emptyCell.classList.add('calendar-day');
            calendarGrid.appendChild(emptyCell);
        }

        for (let day = 1; day <= daysInMonth; day++) {
            const dayCell = document.createElement('div');
            dayCell.classList.add('calendar-day');

            const dayNumber = document.createElement('div');
            dayNumber.classList.add('calendar-day-number');
            dayNumber.textContent = day;
            dayCell.appendChild(dayNumber);

            // Add events for this day
            const dayEvents = events.filter(event => {
                const eventDate = new Date(event.start_time);
                return eventDate.getFullYear() === year &&
                       eventDate.getMonth() === month &&
                       eventDate.getDate() === day;
            });

            dayEvents.forEach(event => {
                const eventDiv = document.createElement('div');
                eventDiv.classList.add('calendar-event');
                eventDiv.textContent = event.title;
                eventDiv.title = event.description || '';
                eventDiv.addEventListener('click', (e) => {
                    e.stopPropagation();
                    openEditModal(event);
                });
                dayCell.appendChild(eventDiv);
            });

            dayCell.addEventListener('click', () => {
                if (!isAdmin) {
                    alert('You do not have permission to add events.');
                    return;
                }
                openAddModal(year, month, day);
            });

            calendarGrid.appendChild(dayCell);
        }
    }

    function openAddModal(year, month, day) {
        editingEventId = null;
        eventForm.reset();
        deleteEventBtn.classList.add('d-none');
        document.getElementById('start_time').value = new Date(year, month, day, 9, 0).toISOString().slice(0,16);
        document.getElementById('end_time').value = new Date(year, month, day, 10, 0).toISOString().slice(0,16);
        addEventModal.show();
    }

    function openEditModal(event) {
        editingEventId = event.id;
        if (!isAdmin) {
            deleteEventBtn.classList.add('d-none');
        } else {
            deleteEventBtn.classList.remove('d-none');
        }
        document.getElementById('title').value = event.title;
        document.getElementById('description').value = event.description || '';
        document.getElementById('start_time').value = event.start_time.slice(0,16);
        document.getElementById('end_time').value = event.end_time ? event.end_time.slice(0,16) : '';
        addEventModal.show();
    }

    eventForm.addEventListener('submit', function(e) {
        if (!isAdmin) {
            e.preventDefault();
            alert('You do not have permission to add or edit events.');
            return;
        }
        e.preventDefault();
        const formData = new FormData(eventForm);
        const data = {
            title: formData.get('title'),
            description: formData.get('description'),
            start_time: formData.get('start_time'),
            end_time: formData.get('end_time') || null,
        };

        let url = '{{ route("calendar.events.store") }}';
        let method = 'POST';

        if (editingEventId) {
            url = `/calendar/events/${editingEventId}`;
            method = 'PUT';
        }

        fetch(url, {
            method: method,
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': '{{ csrf_token() }}',
            },
            body: JSON.stringify(data),
        })
        .then(res => {
            if (!res.ok) throw new Error('Failed to save event');
            return res.json();
        })
        .then(() => {
            addEventModal.hide();
            fetchEvents();
        })
        .catch(err => alert(err.message));
    });

    deleteEventBtn.addEventListener('click', function() {
        if (!editingEventId) return;
        if (!confirm('Are you sure you want to delete this event?')) return;

        fetch(`/calendar/events/${editingEventId}`, {
            method: 'DELETE',
            headers: {
                'X-CSRF-TOKEN': '{{ csrf_token() }}',
            },
        })
        .then(res => {
            if (!res.ok) throw new Error('Failed to delete event');
            addEventModal.hide();
            fetchEvents();
        })
        .catch(err => alert(err.message));
    });

    prevMonthBtn.addEventListener('click', () => {
        currentDate.setMonth(currentDate.getMonth() - 1);
        renderCalendar(currentDate);
    });

    nextMonthBtn.addEventListener('click', () => {
        currentDate.setMonth(currentDate.getMonth() + 1);
        renderCalendar(currentDate);
    });

    fetchEvents();
});
</script>
@endpush
